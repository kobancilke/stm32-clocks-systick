
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003dc  080001a8  080001a8  000011a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000584  0800058c  0000158c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000584  08000584  0000158c  2**0
                  CONTENTS
  4 .ARM          00000000  08000584  08000584  0000158c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000584  0800058c  0000158c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000584  08000584  00001584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000588  08000588  00001588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0000158c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000158c  2**0
                  CONTENTS
 10 .bss          0000002c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a2a  00000000  00000000  000015b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001f0  00000000  00000000  00001fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  000021d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004c  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180bc  00000000  00000000  0000228c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000703  00000000  00000000  0001a348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087f14  00000000  00000000  0001aa4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a295f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000010c  00000000  00000000  000a29a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  000a2ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	@ (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	@ (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800056c 	.word	0x0800056c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	@ (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	@ (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	@ (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800056c 	.word	0x0800056c

080001e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	db0a      	blt.n	8000212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	490c      	ldr	r1, [pc, #48]	@ (8000234 <__NVIC_SetPriority+0x4c>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	0112      	lsls	r2, r2, #4
 8000208:	b2d2      	uxtb	r2, r2
 800020a:	440b      	add	r3, r1
 800020c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000210:	e00a      	b.n	8000228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4908      	ldr	r1, [pc, #32]	@ (8000238 <__NVIC_SetPriority+0x50>)
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	f003 030f 	and.w	r3, r3, #15
 800021e:	3b04      	subs	r3, #4
 8000220:	0112      	lsls	r2, r2, #4
 8000222:	b2d2      	uxtb	r2, r2
 8000224:	440b      	add	r3, r1
 8000226:	761a      	strb	r2, [r3, #24]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <ConfigureSysTick>:
volatile uint8_t clock_setting = 0;
volatile static uint32_t SYSTEM_MS = 0;

void ConfigureSysTick(uint32_t sys_freq);

void ConfigureSysTick(uint32_t sys_freq) {
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (sys_freq / 2000U) - 1U; // 2ms tick
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4a09      	ldr	r2, [pc, #36]	@ (800026c <ConfigureSysTick+0x30>)
 8000248:	fba2 2303 	umull	r2, r3, r2, r3
 800024c:	09db      	lsrs	r3, r3, #7
 800024e:	4a08      	ldr	r2, [pc, #32]	@ (8000270 <ConfigureSysTick+0x34>)
 8000250:	3b01      	subs	r3, #1
 8000252:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0x00;
 8000254:	4b06      	ldr	r3, [pc, #24]	@ (8000270 <ConfigureSysTick+0x34>)
 8000256:	2200      	movs	r2, #0
 8000258:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;
 800025a:	4b05      	ldr	r3, [pc, #20]	@ (8000270 <ConfigureSysTick+0x34>)
 800025c:	2207      	movs	r2, #7
 800025e:	601a      	str	r2, [r3, #0]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	10624dd3 	.word	0x10624dd3
 8000270:	e000e010 	.word	0xe000e010

08000274 <SysTick_Handler>:

void SysTick_Handler(void) {
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
    tickCount++;
 8000278:	4b2b      	ldr	r3, [pc, #172]	@ (8000328 <SysTick_Handler+0xb4>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	4a2a      	ldr	r2, [pc, #168]	@ (8000328 <SysTick_Handler+0xb4>)
 8000280:	6013      	str	r3, [r2, #0]
    SYSTEM_MS++; // Increment SYSTEM_MS on each SysTick interrupt
 8000282:	4b2a      	ldr	r3, [pc, #168]	@ (800032c <SysTick_Handler+0xb8>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	3301      	adds	r3, #1
 8000288:	4a28      	ldr	r2, [pc, #160]	@ (800032c <SysTick_Handler+0xb8>)
 800028a:	6013      	str	r3, [r2, #0]
    changeClockTickCounter++;
 800028c:	4b28      	ldr	r3, [pc, #160]	@ (8000330 <SysTick_Handler+0xbc>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	4a27      	ldr	r2, [pc, #156]	@ (8000330 <SysTick_Handler+0xbc>)
 8000294:	6013      	str	r3, [r2, #0]

    if (tickCount >= 1000) { // 1000 ms delay
 8000296:	4b24      	ldr	r3, [pc, #144]	@ (8000328 <SysTick_Handler+0xb4>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800029e:	d323      	bcc.n	80002e8 <SysTick_Handler+0x74>
        switch(clock_setting) {
 80002a0:	4b24      	ldr	r3, [pc, #144]	@ (8000334 <SysTick_Handler+0xc0>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	2b02      	cmp	r3, #2
 80002a8:	d014      	beq.n	80002d4 <SysTick_Handler+0x60>
 80002aa:	2b02      	cmp	r3, #2
 80002ac:	dc19      	bgt.n	80002e2 <SysTick_Handler+0x6e>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d002      	beq.n	80002b8 <SysTick_Handler+0x44>
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d007      	beq.n	80002c6 <SysTick_Handler+0x52>
 80002b6:	e014      	b.n	80002e2 <SysTick_Handler+0x6e>
            case 0:
                GPIOD->ODR ^= (1 << LED_PIN_0); // Toggle LED 0
 80002b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000338 <SysTick_Handler+0xc4>)
 80002ba:	695b      	ldr	r3, [r3, #20]
 80002bc:	4a1e      	ldr	r2, [pc, #120]	@ (8000338 <SysTick_Handler+0xc4>)
 80002be:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80002c2:	6153      	str	r3, [r2, #20]
                break;
 80002c4:	e00d      	b.n	80002e2 <SysTick_Handler+0x6e>
            case 1:
                GPIOD->ODR ^= (1 << LED_PIN_1); // Toggle LED 1
 80002c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000338 <SysTick_Handler+0xc4>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a1b      	ldr	r2, [pc, #108]	@ (8000338 <SysTick_Handler+0xc4>)
 80002cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80002d0:	6153      	str	r3, [r2, #20]
                break;
 80002d2:	e006      	b.n	80002e2 <SysTick_Handler+0x6e>
            case 2:
                GPIOD->ODR ^= (1 << LED_PIN_2); // Toggle LED 2
 80002d4:	4b18      	ldr	r3, [pc, #96]	@ (8000338 <SysTick_Handler+0xc4>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a17      	ldr	r2, [pc, #92]	@ (8000338 <SysTick_Handler+0xc4>)
 80002da:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 80002de:	6153      	str	r3, [r2, #20]
                break;
 80002e0:	bf00      	nop
        }
        tickCount = 0;
 80002e2:	4b11      	ldr	r3, [pc, #68]	@ (8000328 <SysTick_Handler+0xb4>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
    }

    if (changeClockTickCounter >= TICKS_FOR_CLOCK_CHANGE) {
 80002e8:	4b11      	ldr	r3, [pc, #68]	@ (8000330 <SysTick_Handler+0xbc>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80002f0:	d318      	bcc.n	8000324 <SysTick_Handler+0xb0>
        clock_setting = (clock_setting + 1) % 3; // Cycle through clock settings (0, 1, 2)
 80002f2:	4b10      	ldr	r3, [pc, #64]	@ (8000334 <SysTick_Handler+0xc0>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	1c5a      	adds	r2, r3, #1
 80002fa:	4b10      	ldr	r3, [pc, #64]	@ (800033c <SysTick_Handler+0xc8>)
 80002fc:	fb83 3102 	smull	r3, r1, r3, r2
 8000300:	17d3      	asrs	r3, r2, #31
 8000302:	1ac9      	subs	r1, r1, r3
 8000304:	460b      	mov	r3, r1
 8000306:	005b      	lsls	r3, r3, #1
 8000308:	440b      	add	r3, r1
 800030a:	1ad1      	subs	r1, r2, r3
 800030c:	b2ca      	uxtb	r2, r1
 800030e:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <SysTick_Handler+0xc0>)
 8000310:	701a      	strb	r2, [r3, #0]
        Set_AHB_Frequency(clock_setting); // Change the system clock
 8000312:	4b08      	ldr	r3, [pc, #32]	@ (8000334 <SysTick_Handler+0xc0>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	b2db      	uxtb	r3, r3
 8000318:	4618      	mov	r0, r3
 800031a:	f000 f811 	bl	8000340 <Set_AHB_Frequency>
        changeClockTickCounter = 0;
 800031e:	4b04      	ldr	r3, [pc, #16]	@ (8000330 <SysTick_Handler+0xbc>)
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
    }
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	2000001c 	.word	0x2000001c
 800032c:	20000028 	.word	0x20000028
 8000330:	20000020 	.word	0x20000020
 8000334:	20000024 	.word	0x20000024
 8000338:	40020c00 	.word	0x40020c00
 800033c:	55555556 	.word	0x55555556

08000340 <Set_AHB_Frequency>:

uint32_t millis(void) {
    return SYSTEM_MS;
}

void Set_AHB_Frequency(uint8_t setting) {
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	71fb      	strb	r3, [r7, #7]
    // Reset CFGR register
	RCC->CFGR = 0b00;
 800034a:	4b4e      	ldr	r3, [pc, #312]	@ (8000484 <Set_AHB_Frequency+0x144>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
	RCC->CFGR = 0x0;
 8000350:	4b4c      	ldr	r3, [pc, #304]	@ (8000484 <Set_AHB_Frequency+0x144>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]

    // Turn off HSE, HSI, and PLL
    RCC->CR &= ~(1 << 16); // HSEON = 0
 8000356:	4b4b      	ldr	r3, [pc, #300]	@ (8000484 <Set_AHB_Frequency+0x144>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a4a      	ldr	r2, [pc, #296]	@ (8000484 <Set_AHB_Frequency+0x144>)
 800035c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000360:	6013      	str	r3, [r2, #0]
    RCC->CR &= ~(1 << 0);  // HSION = 0
 8000362:	4b48      	ldr	r3, [pc, #288]	@ (8000484 <Set_AHB_Frequency+0x144>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a47      	ldr	r2, [pc, #284]	@ (8000484 <Set_AHB_Frequency+0x144>)
 8000368:	f023 0301 	bic.w	r3, r3, #1
 800036c:	6013      	str	r3, [r2, #0]
    RCC->CR &= ~(1 << 24); // PLLON = 0
 800036e:	4b45      	ldr	r3, [pc, #276]	@ (8000484 <Set_AHB_Frequency+0x144>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a44      	ldr	r2, [pc, #272]	@ (8000484 <Set_AHB_Frequency+0x144>)
 8000374:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000378:	6013      	str	r3, [r2, #0]

    // Turn off all LEDs before changing the clock setting
    GPIOD->ODR &= ~(1 << LED_PIN_0);
 800037a:	4b43      	ldr	r3, [pc, #268]	@ (8000488 <Set_AHB_Frequency+0x148>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	4a42      	ldr	r2, [pc, #264]	@ (8000488 <Set_AHB_Frequency+0x148>)
 8000380:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000384:	6153      	str	r3, [r2, #20]
    GPIOD->ODR &= ~(1 << LED_PIN_1);
 8000386:	4b40      	ldr	r3, [pc, #256]	@ (8000488 <Set_AHB_Frequency+0x148>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a3f      	ldr	r2, [pc, #252]	@ (8000488 <Set_AHB_Frequency+0x148>)
 800038c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000390:	6153      	str	r3, [r2, #20]
    GPIOD->ODR &= ~(1 << LED_PIN_2);
 8000392:	4b3d      	ldr	r3, [pc, #244]	@ (8000488 <Set_AHB_Frequency+0x148>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a3c      	ldr	r2, [pc, #240]	@ (8000488 <Set_AHB_Frequency+0x148>)
 8000398:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800039c:	6153      	str	r3, [r2, #20]

    switch(setting) {
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	2b02      	cmp	r3, #2
 80003a2:	d036      	beq.n	8000412 <Set_AHB_Frequency+0xd2>
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	dc68      	bgt.n	800047a <Set_AHB_Frequency+0x13a>
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d002      	beq.n	80003b2 <Set_AHB_Frequency+0x72>
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d016      	beq.n	80003de <Set_AHB_Frequency+0x9e>
            //SystemCoreClock = 168000000; // Update SystemCoreClock variable
            break;
    }

    //ConfigureSysTick(SystemCoreClock); // Reconfigure SysTick with the new system core clock
}
 80003b0:	e063      	b.n	800047a <Set_AHB_Frequency+0x13a>
        	RCC->CR |= (1 << 0); // Enable HSI
 80003b2:	4b34      	ldr	r3, [pc, #208]	@ (8000484 <Set_AHB_Frequency+0x144>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a33      	ldr	r2, [pc, #204]	@ (8000484 <Set_AHB_Frequency+0x144>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	6013      	str	r3, [r2, #0]
        	while(!(RCC->CR & (1 << 1))); // Wait for HSI ready
 80003be:	bf00      	nop
 80003c0:	4b30      	ldr	r3, [pc, #192]	@ (8000484 <Set_AHB_Frequency+0x144>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f003 0302 	and.w	r3, r3, #2
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d0f9      	beq.n	80003c0 <Set_AHB_Frequency+0x80>
        	RCC->CFGR |= (0b0000 << 4); // HPRE: No division (0000)
 80003cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000484 <Set_AHB_Frequency+0x144>)
 80003ce:	4a2d      	ldr	r2, [pc, #180]	@ (8000484 <Set_AHB_Frequency+0x144>)
 80003d0:	689b      	ldr	r3, [r3, #8]
 80003d2:	6093      	str	r3, [r2, #8]
            RCC->CFGR |= (0b00 << 0); // SW: HSI selected as system clock (00)
 80003d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000484 <Set_AHB_Frequency+0x144>)
 80003d6:	4a2b      	ldr	r2, [pc, #172]	@ (8000484 <Set_AHB_Frequency+0x144>)
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	6093      	str	r3, [r2, #8]
            break;
 80003dc:	e04d      	b.n	800047a <Set_AHB_Frequency+0x13a>
        	RCC->CR |= (1 << 16); // Enable HSE
 80003de:	4b29      	ldr	r3, [pc, #164]	@ (8000484 <Set_AHB_Frequency+0x144>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a28      	ldr	r2, [pc, #160]	@ (8000484 <Set_AHB_Frequency+0x144>)
 80003e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80003e8:	6013      	str	r3, [r2, #0]
        	while(!(RCC->CR & (1 << 17))); // Wait for HSE ready
 80003ea:	bf00      	nop
 80003ec:	4b25      	ldr	r3, [pc, #148]	@ (8000484 <Set_AHB_Frequency+0x144>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d0f9      	beq.n	80003ec <Set_AHB_Frequency+0xac>
        	RCC->CFGR |= (0b1000 << 4); // HPRE: System clock divided by 2 (1000)
 80003f8:	4b22      	ldr	r3, [pc, #136]	@ (8000484 <Set_AHB_Frequency+0x144>)
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	4a21      	ldr	r2, [pc, #132]	@ (8000484 <Set_AHB_Frequency+0x144>)
 80003fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000402:	6093      	str	r3, [r2, #8]
        	RCC->CFGR |= (0b01 << 0); // SW: HSE selected as system clock (01)
 8000404:	4b1f      	ldr	r3, [pc, #124]	@ (8000484 <Set_AHB_Frequency+0x144>)
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	4a1e      	ldr	r2, [pc, #120]	@ (8000484 <Set_AHB_Frequency+0x144>)
 800040a:	f043 0301 	orr.w	r3, r3, #1
 800040e:	6093      	str	r3, [r2, #8]
        	break;
 8000410:	e033      	b.n	800047a <Set_AHB_Frequency+0x13a>
            RCC->PLLCFGR |= (1 << 22) | (8 << 0) | (336 << 6) | (0b00 << 16); // PLL source = HSE
 8000412:	4b1c      	ldr	r3, [pc, #112]	@ (8000484 <Set_AHB_Frequency+0x144>)
 8000414:	685a      	ldr	r2, [r3, #4]
 8000416:	491b      	ldr	r1, [pc, #108]	@ (8000484 <Set_AHB_Frequency+0x144>)
 8000418:	4b1c      	ldr	r3, [pc, #112]	@ (800048c <Set_AHB_Frequency+0x14c>)
 800041a:	4313      	orrs	r3, r2
 800041c:	604b      	str	r3, [r1, #4]
            RCC->CR |= (1 << 16); // Enable HSE
 800041e:	4b19      	ldr	r3, [pc, #100]	@ (8000484 <Set_AHB_Frequency+0x144>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a18      	ldr	r2, [pc, #96]	@ (8000484 <Set_AHB_Frequency+0x144>)
 8000424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000428:	6013      	str	r3, [r2, #0]
            while(!(RCC->CR & (1 << 17)));
 800042a:	bf00      	nop
 800042c:	4b15      	ldr	r3, [pc, #84]	@ (8000484 <Set_AHB_Frequency+0x144>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000434:	2b00      	cmp	r3, #0
 8000436:	d0f9      	beq.n	800042c <Set_AHB_Frequency+0xec>
            RCC->CR |= (1 << 24); // Enable PLL
 8000438:	4b12      	ldr	r3, [pc, #72]	@ (8000484 <Set_AHB_Frequency+0x144>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a11      	ldr	r2, [pc, #68]	@ (8000484 <Set_AHB_Frequency+0x144>)
 800043e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000442:	6013      	str	r3, [r2, #0]
            while(!(RCC->CR & (1 << 25))); // Wait for PLL ready
 8000444:	bf00      	nop
 8000446:	4b0f      	ldr	r3, [pc, #60]	@ (8000484 <Set_AHB_Frequency+0x144>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f9      	beq.n	8000446 <Set_AHB_Frequency+0x106>
            FLASH->ACR |= (5 << 0); // LATENCY = 5 wait states
 8000452:	4b0f      	ldr	r3, [pc, #60]	@ (8000490 <Set_AHB_Frequency+0x150>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a0e      	ldr	r2, [pc, #56]	@ (8000490 <Set_AHB_Frequency+0x150>)
 8000458:	f043 0305 	orr.w	r3, r3, #5
 800045c:	6013      	str	r3, [r2, #0]
            RCC->CFGR |= (0b10 << 0); // SW set to PLL
 800045e:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <Set_AHB_Frequency+0x144>)
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	4a08      	ldr	r2, [pc, #32]	@ (8000484 <Set_AHB_Frequency+0x144>)
 8000464:	f043 0302 	orr.w	r3, r3, #2
 8000468:	6093      	str	r3, [r2, #8]
            while((RCC->CFGR & (0b11 << 2)) != (0b10 << 2)); // Wait until PLL is used
 800046a:	bf00      	nop
 800046c:	4b05      	ldr	r3, [pc, #20]	@ (8000484 <Set_AHB_Frequency+0x144>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	f003 030c 	and.w	r3, r3, #12
 8000474:	2b08      	cmp	r3, #8
 8000476:	d1f9      	bne.n	800046c <Set_AHB_Frequency+0x12c>
            break;
 8000478:	bf00      	nop
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	40023800 	.word	0x40023800
 8000488:	40020c00 	.word	0x40020c00
 800048c:	00405408 	.word	0x00405408
 8000490:	40023c00 	.word	0x40023c00

08000494 <main>:

int main(void) {
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1 << 3); // Enable clock for GPIOD
 8000498:	4b0a      	ldr	r3, [pc, #40]	@ (80004c4 <main+0x30>)
 800049a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800049c:	4a09      	ldr	r2, [pc, #36]	@ (80004c4 <main+0x30>)
 800049e:	f043 0308 	orr.w	r3, r3, #8
 80004a2:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOD->MODER |= (1 << (2 * LED_PIN_0)) | (1 << (2 * LED_PIN_1)) | (1 << (2 * LED_PIN_2)); // Set PD12, PD13, and PD14 as output
 80004a4:	4b08      	ldr	r3, [pc, #32]	@ (80004c8 <main+0x34>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a07      	ldr	r2, [pc, #28]	@ (80004c8 <main+0x34>)
 80004aa:	f043 53a8 	orr.w	r3, r3, #352321536	@ 0x15000000
 80004ae:	6013      	str	r3, [r2, #0]

    ConfigureSysTick(16000000); // Initial SysTick setup for HSI clock
 80004b0:	4806      	ldr	r0, [pc, #24]	@ (80004cc <main+0x38>)
 80004b2:	f7ff fec3 	bl	800023c <ConfigureSysTick>

    NVIC_SetPriority(SysTick_IRQn, 0); // Set SysTick interrupt priority
 80004b6:	2100      	movs	r1, #0
 80004b8:	f04f 30ff 	mov.w	r0, #4294967295
 80004bc:	f7ff fe94 	bl	80001e8 <__NVIC_SetPriority>

    while (1) {
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <main+0x2c>
 80004c4:	40023800 	.word	0x40023800
 80004c8:	40020c00 	.word	0x40020c00
 80004cc:	00f42400 	.word	0x00f42400

080004d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004d0:	480d      	ldr	r0, [pc, #52]	@ (8000508 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d8:	480c      	ldr	r0, [pc, #48]	@ (800050c <LoopForever+0x6>)
  ldr r1, =_edata
 80004da:	490d      	ldr	r1, [pc, #52]	@ (8000510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000514 <LoopForever+0xe>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e0:	e002      	b.n	80004e8 <LoopCopyDataInit>

080004e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e6:	3304      	adds	r3, #4

080004e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ec:	d3f9      	bcc.n	80004e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f0:	4c0a      	ldr	r4, [pc, #40]	@ (800051c <LoopForever+0x16>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f4:	e001      	b.n	80004fa <LoopFillZerobss>

080004f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f8:	3204      	adds	r2, #4

080004fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004fc:	d3fb      	bcc.n	80004f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004fe:	f000 f811 	bl	8000524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000502:	f7ff ffc7 	bl	8000494 <main>

08000506 <LoopForever>:

LoopForever:
    b LoopForever
 8000506:	e7fe      	b.n	8000506 <LoopForever>
  ldr   r0, =_estack
 8000508:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800050c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000510:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000514:	0800058c 	.word	0x0800058c
  ldr r2, =_sbss
 8000518:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800051c:	2000002c 	.word	0x2000002c

08000520 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000520:	e7fe      	b.n	8000520 <ADC_IRQHandler>
	...

08000524 <__libc_init_array>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	4d0d      	ldr	r5, [pc, #52]	@ (800055c <__libc_init_array+0x38>)
 8000528:	4c0d      	ldr	r4, [pc, #52]	@ (8000560 <__libc_init_array+0x3c>)
 800052a:	1b64      	subs	r4, r4, r5
 800052c:	10a4      	asrs	r4, r4, #2
 800052e:	2600      	movs	r6, #0
 8000530:	42a6      	cmp	r6, r4
 8000532:	d109      	bne.n	8000548 <__libc_init_array+0x24>
 8000534:	4d0b      	ldr	r5, [pc, #44]	@ (8000564 <__libc_init_array+0x40>)
 8000536:	4c0c      	ldr	r4, [pc, #48]	@ (8000568 <__libc_init_array+0x44>)
 8000538:	f000 f818 	bl	800056c <_init>
 800053c:	1b64      	subs	r4, r4, r5
 800053e:	10a4      	asrs	r4, r4, #2
 8000540:	2600      	movs	r6, #0
 8000542:	42a6      	cmp	r6, r4
 8000544:	d105      	bne.n	8000552 <__libc_init_array+0x2e>
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	f855 3b04 	ldr.w	r3, [r5], #4
 800054c:	4798      	blx	r3
 800054e:	3601      	adds	r6, #1
 8000550:	e7ee      	b.n	8000530 <__libc_init_array+0xc>
 8000552:	f855 3b04 	ldr.w	r3, [r5], #4
 8000556:	4798      	blx	r3
 8000558:	3601      	adds	r6, #1
 800055a:	e7f2      	b.n	8000542 <__libc_init_array+0x1e>
 800055c:	08000584 	.word	0x08000584
 8000560:	08000584 	.word	0x08000584
 8000564:	08000584 	.word	0x08000584
 8000568:	08000588 	.word	0x08000588

0800056c <_init>:
 800056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056e:	bf00      	nop
 8000570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000572:	bc08      	pop	{r3}
 8000574:	469e      	mov	lr, r3
 8000576:	4770      	bx	lr

08000578 <_fini>:
 8000578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057a:	bf00      	nop
 800057c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057e:	bc08      	pop	{r3}
 8000580:	469e      	mov	lr, r3
 8000582:	4770      	bx	lr
